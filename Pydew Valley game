#############################################level.py########################################

import pygame
from settings import *
from player import Player

class Level:
    def __init__(self):
        
        # get the display surface
        self.display_surface = pygame.display.get_surface()
        
        #sprite groups
        self.all_sprites = pygame.sprite.Group()
        
        self.setup()
        
    def setup(self):
        self.player = Player((640,360), self.all_sprites)
    
    def run(self,dt):
        self.display_surface.fill('black')
        self.all_sprites.draw(self.display_surface)
        self.all_sprites.update(dt)       
       
       
       ##############################settings.py#############################################
        
        from pygame.math import Vector2
# screen
SCREEN_WIDTH = 1280
SCREEN_HEIGHT = 720
TILE_SIZE = 64

# overlay positions
OVERLAY_POSITIONS = {
    'tool' : (40, SCREEN_HEIGHT - 15),
    'seed': (70, SCREEN_HEIGHT - 5)}

PLAYER_TOOL_OFFSET = {
    'left': Vector2(-50,40),
    'right': Vector2(50,40),
    'up' : Vector2(0,-10),
    'down' : Vector2(0,50)
}

LAYERS = {
    'water': 0,
    'ground': 1,
    'soil': 2,
    'soil water': 3,
    'rain floor': 4,
    'house bottom': 5,
    'ground plant': 6,
    'main': 7,
    'house top': 8,
    'fruit': 9,
    'rain drops': 10,
}

APPLE_POS = {
    'Small': [(18,17), (30,37), (12,50), (30,45), (20,30), (30,10)],
    'large': [(30,24), (60,65), (50,50), (16,40),(45,50), (42,70)]
}

GROW_SPEED = {
    'corn': 1,
    'tomato': 0.7
}

SALE_PRICES = {
    'wood': 4,
    'apple': 2,
    'corn': 10,
    'tomato': 20
}
PURCHASE_PRICES = {
    'corn': 4,
    'tomato': 5
}

#################################Main2.py#########################################

import pygame, sys
from settings import *
from level import Level

class Game:
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT))
        pygame.display.set_caption('Sprout land')
        self.clock = pygame.time.Clock()
        self.level = Level()
        
    def run(self):
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                    
            dt = self.clock.tick() / 1000
            self.level.run(dt)
            pygame.display.update()
            
if __name__ == '__main__':
    game = Game()
    game.run()
    
#################################player.py##########################################

import pygame
from settings import *
from support import *

class Player(pygame.sprite.Sprite):
    def __init__(self, pos, group):
        super().__init__(group)
        
        self.import_assets()
        self.status = 'down_idle'
        self.frame_index = 0
        
        # general setup
        self.image = self.animations[self.status][self.frame_index]
        self.rect = self.image.get_rect(center = pos)
        
        # movement attributes
        self.direction = pygame.math.Vector2()
        self.pos = pygame.math.Vector2(self.rect.center)
        self.speed = 200
        
    def import_assets(self):
        self.animations = {'up': [],'down': [],'left': [],'right': [],
                           'right_idle': [],'left_idle': [],'up_idle': [],'down_idle': [],
                           'right_hoe': [],'left_hoe': [],'up_hoe': [],'down_hoe': [],
                           'right_axe': [],'left_axe': [],'up_axe': [],'down_axe': [],
                           'right_water': [],'left_water': [],'up_water': [],'down_water':[]}
        for animation in self.animation.keys():
            full_path = '/graphics/character/' + animation
            self.animation[animation] = import_folder(full_path)
        print(self.animations)
        
    def input(self):
        keys = pygame.key.get_pressed()
        
        if keys[pygame.K_UP]:
            self.direction.y = -1
        elif keys[pygame.K_DOWN]:
            self.direction.y = 1
        else:
            self.direction.y = 0
          
        if keys[pygame.K_RIGHT]:
            self.direction.x = 1
        elif keys[pygame.K_LEFT]:
            self.direction.x = -1
        else:
            self.direction.x = 0
            
        def move(self,dt):
            
            #normalizing a vector
            if self.direction.magnitude() > 0:
                self.direction = self.direction.normalize()
                
            #horizontal movement
            self.pos.x += self.direction.x * self.speed * dt
            self.rect.centerx = self.pos.x
            
            #vertical movement
            self.pos.y += self.direction.y * self.speed * dt
            self.rect.centery = self.pos.y
            
            
        def update(self, dt):
            self.input()
            self.move(dt)

##########################################support.py##############################################

from os import walk
import pygame

def import_folder(path):
    surface_list = []
    
    for _, __, img_files in walk(path):
        for image in img_files:
            full_path = path + '/' + image
            image_surf = pygame.image.load(full_path).convert_alpha()
            surf_list.append(image_surf)

    return surface_list
